{"name":"Eggplot","tagline":"A C++ library that allows you to plot data just as in MATLAB","body":"Eggplot\r\n=======\r\n\r\nA C++ library that allows you to plot just as in MATLAB \r\n\r\n\r\nPlatforms\r\n---------\r\n\r\n+ Windows, Linux, OS X\r\n+ Tested on g++, clang++ \r\n+ C++11 (API simplified a lot by `std::initializer_list`)\r\n+ gnuplot 4.6 and above in `$PATH`\r\n\r\n\r\nQuick examples\r\n--------------\r\n\r\n### 1. Simple curve\r\n![ex1](http://github.com/yuchsiao/eggplot/raw/master/img/eggp-export-ex1.png)\r\n\r\nInclude the header file `eggplot.h` and assume __x__ and __t__ are `vector<double>` of the same length:\r\n\r\n```\r\neggp::Eggplot curvePlot; \r\n\r\ncurvePlot.plot({t,x});\r\ncurvePlot.exec();\r\n```\r\n\r\nThe code above will plot __x__ against __t__ with default labels for both axes.\r\nThe function call `.exec()` must be the last command and object initialization `eggp::Eggplot objectName` must be the first. \r\nThe orders of all the other setup and plot commands can be arbitrary.\r\nSee function `example1` in `src/main.cpp`.\r\n\r\n\r\n### 2. Multiple curves with legends\r\n![ex2](http://github.com/yuchsiao/eggplot/raw/master/img/eggp-export-ex2.png)\r\n\r\nInclude the header file `eggplot.h` and assume __x1__, __x2__, and __t__ are `vector<double>` of the same length:\r\n\r\n```\r\neggp::Eggplot curvePlot; \r\n\r\ncurvePlot.xlabel(\"x\");\r\ncurvePlot.ylabel(\"pdf_{{/Symbol m},{/Symbol s}} (x)\");  // enhanced texts\r\n\r\ncurvePlot.plot({ t,x1, t,x2 });  // plot two curves by cascading data pairs\r\n\r\ncurvePlot.legend({\"{/Symbol l}=1\",\r\n                  \"{/Symbol l}=4\"});\r\ncurvePlot.grid(true);            // turn on grids\r\n\r\ncurvePlot.exec();\r\n```\r\n\r\nEggplot can plot more than one curve simultaneously on the same plot by cascading data pairs just as in MATLAB. \r\nLegends can be set up in a similar manner.\r\n\r\nTexts can be formatted with subscripts (`\"_\"`), superscript (`\"^\"`), and breaklines (`\"\\\\n\"`).\r\nGreek letters and other symbols are represented in different syntaxes from Latex. \r\n[See here](http://mathewpeet.org/lists/symbols/) for a list of available symbols.\r\nSee function `example2` in `src/main.cpp`.\r\n\r\n\r\n### 3. Curve customization\r\n![ex3](http://github.com/yuchsiao/eggplot/raw/master/img/eggp-export-ex3.png)\r\n\r\nThe assumptions are the same as the previous example:\r\n\r\n```\r\neggp::Eggplot curvePlot;\r\n\r\ncurvePlot.plot({ t,x1, t,x2 });\r\n\r\nusing namespace eggp;\r\n\r\n// multiple property setup in one statement\r\ncurvePlot.linespec(1, {{MarkerSize, \"0.5\"}, {Marker, \"*\"}});\r\n\r\n// single property setup in multiple statements\r\ncurvePlot.linespec(2, Color, \"b\");\r\ncurvePlot.linespec(2, LineWidth, 2);\r\ncurvePlot.linespec(2, Marker, \"none\");\r\n\r\ncurvePlot.exec();\r\n```\r\n\r\nMember function `.linespec()` customizes the line with the specified index. \r\nTwo propertypes are implemented: the first one utilizes `std::initializer_list` and the 2nd one sets up a single property.\r\n\r\nCustomizable properties  include `LineStyle`, `LineWidth`, `Marker`, `MarkerSize`, and `Color`, each of which is defined within the namespace `eggp`.\r\nA list of options can be referred in the API section.\r\nSee function `example3` in `src/main.cpp`.\r\n\r\n\r\n### 4. File export\r\n\r\nEggplot can export plots to various image types, including `.png`, `.eps`, `.pdf`, `.html`, and `.svg`.\r\n\r\n```\r\neggp::Eggplot curvePlot(SCREEN|PNG|EPS|PDF|HTML|SVG);\r\n\r\n// set export file name, default: \"eggp-export\"\r\ncurvePlot.print(\"eggp-test\");\r\n\r\ncurvePlot.plot({ t,x1, t,x2 });\r\ncurvePlot.exec();\r\n```\r\n\r\nThe output files will then be `eggp-export.png`, `eggp-export.eps`, and so on. \r\nNote that both EPS and PDF modes also support LaTeX-formatted texts.\r\nSee function `example4` in `src/main.cpp`.\r\n\r\n\r\nAPI\r\n---\r\n\r\n### class eggp::Eggplot\r\n\r\n#### Constructor\r\n\r\n+ **```Eggplot(unsigned mode=eggp::SCREEN)```** initializes object and sets up where to plot. \r\nThe default is `eggp::SCREEN` to plot on screen. \r\nOther output modes include `eggp::PNG`, `eggp::EPS`, `eggp::PDF`, `eggp::HTML`, and `eggp::SVG` that plot in `.png`, `.eps`, `.pdf`, `.html`, and `.svg` files, respectively.\r\n\r\n#### Member functions\r\n\r\n#####_Text Related_\r\n\r\n+ **```void xlabel(const std::string &label)```** sets up x axis label\r\n\r\n+ **```void ylabel(const std::string &label)```** sets up y axis label\r\n\r\n+ **```void title(const std::string &label)```** sets up figure title\r\n\r\n+ **```void legend(std::initializer_list<std::string> legendVec)```** sets up figure legeneds. If the length of `legendVec` is shorter than the number of curves, default legends will be used for those whose legends are not specified.\r\n\r\n#####_Line Property Related_\r\n\r\n+ **```void linespec(unsigned lineIndex, LineSpecInput lineSpec)```** customizes curves with the index `lineIndex`, starting from 1. `LineSpecInput` is a `std::map` that takes different `LineProperty` (`eggp::LineStyle`, `eggp::LineWidth`, `eggp::Marker`, `eggp::MarkerSize`, `eggp::Color`) as the key and a string as the value. In practice, written the curve setups in an initializer list is useful as in Example 3. Color can be specified in five ways: color name, color name shortcut, hex code, decimal code, and rgb values between 0 and 1. For example, for red, \"r\", \"red\", \"#ff0000\", \"(255,0,0)\", and \"[1.0, 0, 0]\" are equivalent.\r\n\r\n\r\n+ **```void linespec(unsigned lineIndex, LineProperty property, std::string value)```** customizes a single curve property. All options are the same as the previous one.\r\n\r\n\r\n+ **```void linespec(unsigned lineIndex, LineProperty property, double value)```** customizes a single curve property with a `double` value. Same as the previous one except for the `double` data type. Only valid for `eggp::LineWidth` and `eggp::MarkerSize`.\r\n\r\n\r\n+ **```void grid(bool flag)```** turns on or off grids of the plot\r\n\r\n#####_Output Related_\r\n\r\n+ **```void plot(std::initializer_list<DataVector> il)```** saves data in file `eggp.dat`. The argument must be paired (even-numbered vectors in `il`) such that each pair (the (2N-1)-th and (2N)-th vectors , N=1,2,...) has the same length. This command does not plot but only store data in hard drives. The actual plots and exports happen at function `.exec()`.\r\n\r\n+ **```void print(const std::string &filenameExport)```** sets up export file name, or the default file name `eggp-export` will be used, otherwise. Again, this command does not really print to files but only set up the file name. The actual print and export processes happen at function `.exec()`.\r\n \r\n+ **```void exec()```** executes everything. All previous functions set up and store necessary information for plotting and export. This function automatically generates file `eggp.gp` as input for _gnuplot_ and call `gnuplot eggp.gp` as a system call in Windows cmd or bash in Linux or OS X). The function must be called as the last command in order to generate plots.\r\n\r\n\r\nFuture features\r\n---------------\r\n\r\n+ xtic and ytic setup\r\n+ axis range customization\r\n+ Other types of plots are considered also in the future.\r\n\r\n\r\n\r\n\r\n\r\n","google":"UA-51282565-1","note":"Don't delete this file! It's used internally to help with page regeneration."}